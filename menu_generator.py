# –§–∞–π–ª: menu_generator.py
import datetime
from typing import List, Optional
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import database as db
from utils import get_now, seconds_to_str
from config import CONFIG

class MenuGenerator:
    """–ö–ª–∞—Å—Å, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä –≤ –±–æ—Ç–µ."""

    @staticmethod
    async def get_main_menu(user_id: int) -> Optional[InlineKeyboardMarkup]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        today = get_now().date()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ
        absences = db.get_absences_for_user(user_id, today)
        if absences:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ, –º–µ–Ω—é –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç command_handler)
            return None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –∏–ª–∏ —É–∂–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–µ–Ω—å
        is_weekend = today.weekday() >= 5
        today_logs = db.get_todays_work_log_for_user(user_id)
        if today_logs and not is_weekend:
            is_weekend = True # –°—á–∏—Ç–∞–µ–º –¥–µ–Ω—å –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º, –∫–∞–∫ –≤—ã—Ö–æ–¥–Ω–æ–π

        # –ú–µ–Ω—é –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∏–ª–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
        if is_weekend:
            buttons = [
                {"text": "üõ†Ô∏è –î–æ–ø. —Ä–∞–±–æ—Ç–∞", "callback": "additional_work_menu"},
                {"text": "‚ùì –ü–æ–º–æ—â—å", "callback": "help_button"}
            ]
            return MenuGenerator.generate_from_list(buttons)

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
        today_str = str(today)
        approved_remote_work = db.get_approved_request(user_id, '–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞', today_str)
        
        buttons = []
        if approved_remote_work:
            buttons.append({"text": "‚òÄÔ∏è –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É (—É–¥–∞–ª–µ–Ω–Ω–æ)", "callback": "start_work_remote"})
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
            buttons.append({"text": "‚òÄÔ∏è –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (–≤ –æ—Ñ–∏—Å–µ)", "callback": "start_work_office_location"})
        
        buttons.extend([
            {"text": "üè¶ –ë–∞–Ω–∫ –≤—Ä–µ–º–µ–Ω–∏", "callback": "show_time_bank"},
            {"text": "üõ†Ô∏è –î–æ–ø. —Ä–∞–±–æ—Ç–∞", "callback": "additional_work_menu"},
            {"text": "üìù –û—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ", "callback": "absence_menu"},
            {"text": "üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á–µ—Ç", "callback": "request_report"},
            {"text": "‚ùì –ü–æ–º–æ—â—å", "callback": "help_button"}
        ])
        return MenuGenerator.generate_from_list(buttons)

    @staticmethod
    def get_working_menu() -> InlineKeyboardMarkup:
        buttons = [
            {"text": "üåô –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å", "callback": "end_work"},
            {"text": "‚òï –£–π—Ç–∏ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤", "callback": "start_break"},
            {"text": "üè¶ –ë–∞–Ω–∫ –≤—Ä–µ–º–µ–Ω–∏", "callback": "show_time_bank"},
            {"text": "üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á–µ—Ç", "callback": "request_report"},
            {"text": "‚è±Ô∏è –ú–æ–µ –≤—Ä–µ–º—è", "callback": "show_status"},
            {"text": "‚ùì –ü–æ–º–æ—â—å", "callback": "help_button"}
        ]
        return MenuGenerator.generate_from_list(buttons)

    @staticmethod
    def get_break_menu() -> InlineKeyboardMarkup:
        buttons = [
            {"text": "‚ñ∂Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è —Å –ø–µ—Ä–µ—Ä—ã–≤–∞", "callback": "end_break"},
            {"text": "üè¶ –ë–∞–Ω–∫ –≤—Ä–µ–º–µ–Ω–∏", "callback": "show_time_bank"},
            {"text": "üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á–µ—Ç", "callback": "request_report"},
            {"text": "‚è±Ô∏è –ú–æ–µ –≤—Ä–µ–º—è", "callback": "show_status"},
            {"text": "‚ùì –ü–æ–º–æ—â—å", "callback": "help_button"}
        ]
        return MenuGenerator.generate_from_list(buttons)
        
    @staticmethod
    def get_manager_menu() -> InlineKeyboardMarkup:
        buttons = [
            {"text": "üë®‚Äçüíª –°—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã", "callback": "team_status_button"},
            {"text": "üìä –û—Ç—á–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ", "callback": "manager_report_button"},
            {"text": "‚ùì –ü–æ–º–æ—â—å", "callback": "help_button"}
        ]
        return MenuGenerator.generate_from_list(buttons)

    @staticmethod
    def get_report_period_menu(is_manager: bool = False, in_session: bool = False) -> InlineKeyboardMarkup:
        base_callback = "manager" if is_manager else "employee"
        buttons = [
            {"text": "üìä –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è", "callback": f'report_today_{base_callback}'},
            {"text": "üóìÔ∏è –û—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "callback": f'report_this_month_{base_callback}'},
            {"text": "üìÖ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", "callback": f'report_custom_period_{base_callback}'}
        ]
        back_button_data = 'back_to_main_menu'
        if is_manager:
            back_button_data = 'back_to_manager_menu'
        elif in_session:
            back_button_data = 'back_to_working_menu'
        
        keyboard = [[InlineKeyboardButton(btn['text'], callback_data=btn['callback'])] for btn in buttons]
        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=back_button_data)])
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def get_additional_work_menu(user_id: int) -> InlineKeyboardMarkup:
        total_debt_seconds = db.get_total_debt(user_id)
        buttons = []
        if total_debt_seconds > 0:
            debt_str = seconds_to_str(total_debt_seconds)
            buttons.append({"text": f"–ü–æ–≥–∞—Å–∏—Ç—å –¥–æ–ª–≥ ({debt_str})", "callback": 'start_debt_work'})
        
        buttons.append({"text": "üè¶ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤ –±–∞–Ω–∫ –≤—Ä–µ–º–µ–Ω–∏", "callback": 'start_banking_work'})
        buttons.append({"text": "¬´ –ù–∞–∑–∞–¥", "callback": 'back_to_main_menu'})
        return MenuGenerator.generate_from_list(buttons)

    @staticmethod
    def get_extra_work_active_menu(status: str, start_time: datetime.datetime) -> (str, InlineKeyboardMarkup):
        duration_str = seconds_to_str((get_now() - start_time).total_seconds())
        
        if status == 'clearing_debt':
            text = f"–ò–¥–µ—Ç –æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ª–≥–∞. –ü—Ä–æ—à–ª–æ: {duration_str}"
            button_text = "–ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç—Ä–∞–±–æ—Ç–∫—É"
            callback_data = "end_debt_work"
        else: # banking_time
            text = f"–ò–¥–µ—Ç —Ä–∞–±–æ—Ç–∞ –≤ –±–∞–Ω–∫ –≤—Ä–µ–º–µ–Ω–∏. –ù–∞–∫–æ–ø–ª–µ–Ω–æ: {duration_str}"
            button_text = "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ –±–∞–Ω–∫"
            callback_data = "end_banking_work"

        keyboard = [[InlineKeyboardButton(button_text, callback_data=callback_data)]]
        return text, InlineKeyboardMarkup(keyboard)

    @staticmethod
    def get_absence_menu() -> InlineKeyboardMarkup:
        buttons = [
            {"text": "üíª –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (–∑–∞–ø—Ä–æ—Å)", "callback": "request_remote_work"},
            {"text": "üôã‚Äç‚ôÇÔ∏è –ü–æ–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–≥—É–ª", "callback": "request_day_off"},
            {"text": "ü§ß –ë–æ–ª—å–Ω–∏—á–Ω—ã–π", "callback": "absence_sick"},
            {"text": "üå¥ –û—Ç–ø—É—Å–∫", "callback": "absence_vacation"},
            {"text": "‚úàÔ∏è –ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞", "callback": "absence_trip"},
            {"text": "¬´ –ù–∞–∑–∞–¥", "callback": "back_to_main_menu"}
        ]
        return MenuGenerator.generate_from_list(buttons)

    @staticmethod
    def get_early_leave_menu() -> InlineKeyboardMarkup:
        buttons = [
            {"text": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–Ω–∫ –≤—Ä–µ–º–µ–Ω–∏", "callback": "end_work_use_bank"},
            {"text": "–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ", "callback": "end_work_ask_manager"},
            {"text": "¬´ –û—Ç–º–µ–Ω–∞", "callback": "back_to_working_menu"}
        ]
        return MenuGenerator.generate_from_list(buttons)

    @staticmethod
    def generate_from_list(buttons: List[dict]) -> InlineKeyboardMarkup:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é: –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É."""
        keyboard = [[InlineKeyboardButton(btn['text'], callback_data=btn['callback'])] for btn in buttons]
        return InlineKeyboardMarkup(keyboard)

