# –§–∞–π–ª: report_generator.py
import datetime
from typing import List
import database as db
from utils import seconds_to_str, get_now

class ReportGenerator:
    """–ö–ª–∞—Å—Å, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤."""

    @staticmethod
    async def get_team_status_text(manager_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è."""
        team_members = db.get_managed_users(manager_id)
        if not team_members:
            return "–ó–∞ –≤–∞–º–∏ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."
        
        status_lines = [f"**–°—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã –Ω–∞ {get_now().strftime('%d.%m.%Y %H:%M')}**\n"]
        today = get_now().date()
        
        for member in team_members:
            member_id = member['user_id']
            member_name = member['full_name']
            session = db.get_session_state(member_id)
            
            if session and session.get('status'):
                status = session['status']
                start_time = session['start_time']
                if status == 'working':
                    status_lines.append(f"üü¢ {member_name}: –†–∞–±–æ—Ç–∞–µ—Ç —Å {start_time.strftime('%H:%M')}")
                elif status == 'on_break':
                    break_start = session.get('break_start_time')
                    status_lines.append(f"‚òïÔ∏è {member_name}: –ù–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ —Å {break_start.strftime('%H:%M')}")
                else:
                    status_lines.append(f"‚öôÔ∏è {member_name}: –î–æ–ø. —Ä–∞–±–æ—Ç–∞ —Å {start_time.strftime('%H:%M')}")
            else:
                absences = db.get_absences_for_user(member_id, today)
                if absences:
                    status_lines.append(f"üèñÔ∏è {member_name}: {absences[0]['absence_type']}")
                else:
                    last_log = db.get_todays_work_log_for_user(member_id)
                    if last_log:
                        status_lines.append(f"‚ö™Ô∏è {member_name}: –ó–∞–∫–æ–Ω—á–∏–ª —Ä–∞–±–æ—Ç—É –≤ {last_log['end_time'].strftime('%H:%M')}")
                    else:
                        status_lines.append(f"‚ö™Ô∏è {member_name}: –ù–µ –≤ —Å–µ—Ç–∏")
        
        return "\n".join(status_lines)

    @staticmethod
    async def get_employee_report_text(user_id: int, start_date: datetime.date, end_date: datetime.date) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""
        work_logs = db.get_work_logs_for_user(user_id, str(start_date), str(end_date + datetime.timedelta(days=1)))
        total_work_seconds = sum(log.get('total_work_seconds', 0) for log in work_logs)
        total_break_seconds = sum(log.get('total_break_seconds', 0) for log in work_logs)
        
        report_text = f"**–û—Ç—á–µ—Ç –¥–ª—è –≤–∞—Å –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}**\n\n"
        report_text += f"**–ß–∏—Å—Ç–æ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:** {seconds_to_str(total_work_seconds)}\n"
        report_text += f"**–í—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö:** {seconds_to_str(total_break_seconds)}\n\n"
        
        cleared_debt = db.get_debt_logs_for_user(user_id, str(start_date), str(end_date + datetime.timedelta(days=1)))
        total_current_debt = db.get_total_debt(user_id)
        if cleared_debt > 0 or total_current_debt > 0:
            report_text += f"**–û—Ç—Ä–∞–±–æ—Ç–∫–∞:**\n"
            report_text += f"–ó–∞–∫—Ä—ã—Ç–æ –¥–æ–ª–≥–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {seconds_to_str(cleared_debt)}\n"
            report_text += f"–û–±—â–∏–π —Ç–µ–∫—É—â–∏–π –¥–æ–ª–≥: {seconds_to_str(total_current_debt)}"
            
        return report_text

    @staticmethod
    async def get_manager_report_text(manager_id: int, start_date: datetime.date, end_date: datetime.date) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è."""
        team_members = db.get_managed_users(manager_id)
        if not team_members:
            return "–ó–∞ –≤–∞–º–∏ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."
            
        report_lines = [f"**–û—Ç—á–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}**\n"]
        
        for member in team_members:
            member_id = member['user_id']
            member_name = member['full_name']
            
            logs = db.get_work_logs_for_user(member_id, str(start_date), str(end_date + datetime.timedelta(days=1)))
            absences_list = db.get_absences_for_user(member_id, start_date) # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
            
            employee_line = f"üë§ **{member_name}**:"
            
            if logs:
                total_work = sum(log.get('total_work_seconds', 0) for log in logs)
                total_break = sum(log.get('total_break_seconds', 0) for log in logs)
                employee_line += f" –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ {seconds_to_str(total_work)} (–ø–µ—Ä–µ—Ä—ã–≤—ã: {seconds_to_str(total_break)})."
            
            if absences_list:
                details = [f"{a['absence_type']} ({a['start_date'].strftime('%d.%m')}-{a['end_date'].strftime('%d.%m')})" for a in absences_list]
                employee_line += f"\n  - *–û—Ç—Å—É—Ç—Å—Ç–≤–∏—è:* {', '.join(details)}" if logs else f" *{', '.join(details)}.*"
            
            if not logs and not absences_list:
                employee_line += " –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥."
                
            report_lines.append(employee_line)

        return "\n".join(report_lines)