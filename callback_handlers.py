# –§–∞–π–ª: callback_handlers.py
# –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏.

import datetime
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

import database as db
from config import CONFIG
from menu_generator import MenuGenerator
from report_generator import ReportGenerator
from utils import get_now, end_workday_logic, seconds_to_str

logger = logging.getLogger(__name__)

class CallbackHandlerManager:
    """
    –ö–ª–∞—Å—Å-–º–µ–Ω–µ–¥–∂–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ callback-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä.
    –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –±–æ—Ç–µ –≤ –∏—Ç–æ–≥–µ –≤—ã–∑—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∏–∑ –º–µ—Ç–æ–¥–æ–≤ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞.
    """

    async def main_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ì–ª–∞–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤.
        –û–Ω –ø–æ–ª—É—á–∞–µ—Ç callback_data –æ—Ç –∫–Ω–æ–ø–∫–∏ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞.
        """
        query = update.callback_query
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∏–¥–µ–ª "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏.
        await query.answer()
        
        user_id = query.from_user.id
        command = query.data

        # –°–ª–æ–≤–∞—Ä—å-–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ callback_data)
        routes = {
            'show_status': self.show_status,
            'show_time_bank': self.show_time_bank,
            'absence_menu': self.absence_menu,
            'back_to_main_menu': self.back_to_main_menu,
            'back_to_working_menu': self.back_to_working_menu,
            'back_to_manager_menu': self.back_to_manager_menu,
            'start_work_remote': self.start_work_remote,
            'end_work': self.end_work,
            'start_break': self.start_break,
            'end_break': self.end_break,
            'end_work_use_bank': self.end_work_use_bank,
            'end_work_ask_manager': self.end_work_ask_manager,
            'additional_work_menu': self.additional_work_menu,
            'start_debt_work': self.start_debt_work,
            'start_banking_work': self.start_banking_work,
            'end_debt_work': self.end_debt_work,
            'end_banking_work': self.end_banking_work,
            'request_report': self.request_report,
            'manager_report_button': self.request_report,
            'team_status_button': self.team_status_button,
            'help_button': self.help_button,
            'show_all_users': self.show_all_users,
            'cancel_action': self.cancel_action,
        }
        
        handler_method = routes.get(command)

        if handler_method:
            await handler_method(update, context)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö callback'–æ–≤ (—Å ID –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
        elif command.startswith(('approve_', 'deny_', 'approve_no_debt_', 'ack_request_')):
            await self.process_manager_decision(update, context)
        elif command.startswith('user_details_'):
            await self.user_details(update, context)
        elif command.startswith('confirm_delete_'):
            await self.confirm_delete(update, context)
        elif command.startswith('report_today_') or command.startswith('report_this_month_'):
            await self.generate_period_report(update, context)
        else:
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback –æ—Ç user_id {user_id}: {command}")

    # --- –ú–ï–¢–û–î–´-–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

    async def show_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        query = update.callback_query
        user_id = query.from_user.id
        session_state = db.get_session_state(user_id)
        status_text = "–í—ã –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏."
        if session_state and session_state.get('status'):
            status = session_state['status']
            start_time = session_state['start_time']
            if status == 'working':
                work_duration = (get_now() - start_time).total_seconds()
                break_duration = session_state.get('total_break_seconds', 0)
                remaining_break = CONFIG.DAILY_BREAK_LIMIT_SECONDS - break_duration
                status_text = (f"–°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç–µ\n"
                               f"–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {seconds_to_str(work_duration - break_duration)}\n"
                               f"–û—Å—Ç–∞–ª–æ—Å—å –ø–µ—Ä–µ—Ä—ã–≤–∞: {seconds_to_str(remaining_break)}")
            elif status == 'on_break':
                break_start_time = session_state['break_start_time']
                elapsed_break = (get_now() - break_start_time).total_seconds()
                status_text = f"–°—Ç–∞—Ç—É—Å: –ù–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {seconds_to_str(elapsed_break)}"
            elif status in ['clearing_debt', 'banking_time']:
                elapsed_extra = (get_now() - start_time).total_seconds()
                work_type_text = "–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ª–≥–∞" if status == 'clearing_debt' else "–†–∞–±–æ—Ç–∞ –≤ –±–∞–Ω–∫ –≤—Ä–µ–º–µ–Ω–∏"
                status_text = f"–°—Ç–∞—Ç—É—Å: {work_type_text}\n–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {seconds_to_str(elapsed_extra)}"
        await query.answer(text=status_text, show_alert=True)

    async def show_time_bank(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–∞–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏."""
        query = update.callback_query
        user_id = query.from_user.id
        user_info = db.get_user(user_id)
        banked_seconds = user_info.get('time_bank_seconds', 0) if user_info else 0
        await query.answer(f"üè¶ –í –≤–∞—à–µ–º –±–∞–Ω–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ: {seconds_to_str(banked_seconds)}", show_alert=True)

    # --- –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è ---

    async def start_work_remote(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å."""
        await self.start_work(update, update.callback_query.from_user.id, is_remote=True)
        
    async def start_work(self, update: Update, user_id: int, is_remote: bool):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã (—É–¥–∞–ª–µ–Ω–Ω–æ –∏–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏)."""
        if db.get_session_state(user_id):
            await update.effective_message.reply_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é.")
            return

        new_state = {'status': 'working', 'start_time': get_now(), 'total_break_seconds': 0, 'is_remote': is_remote}
        db.set_session_state(user_id, new_state)
        
        message_text = f"–†–∞–±–æ—á–∏–π –¥–µ–Ω—å –Ω–∞—á–∞—Ç –≤ {new_state['start_time'].strftime('%H:%M:%S')}."
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(text=message_text, reply_markup=MenuGenerator.get_working_menu())
        else: # –≠—Ç–æ—Ç –±–ª–æ–∫ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, –≥–¥–µ –Ω–µ—Ç callback_query
            await update.effective_message.reply_text(text=message_text, reply_markup=MenuGenerator.get_working_menu())

    async def end_work(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –∏–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã, –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –≤—ã—Ä–∞–±–æ—Ç–∞–Ω–æ."""
        query = update.callback_query
        user_id = query.from_user.id
        session_state = db.get_session_state(user_id)
        if not session_state: return

        work_duration = (get_now() - session_state['start_time']).total_seconds()
        if work_duration < CONFIG.MIN_WORK_SECONDS:
            await query.edit_message_text("–í—ã —Ö–æ—Ç–∏—Ç–µ —É–π—Ç–∏ —Ä–∞–Ω—å—à–µ. –ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏–º?", reply_markup=MenuGenerator.get_early_leave_menu())
        else:
            await query.edit_message_text("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è...")
            await end_workday_logic(context, user_id)

    async def start_break(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ä—ã–≤–∞."""
        query = update.callback_query
        user_id = query.from_user.id
        session_state = db.get_session_state(user_id)
        
        if not session_state or session_state.get('status') != 'working':
            await query.answer("–ù–µ–ª—å–∑—è —É–π—Ç–∏ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤, –Ω–µ –Ω–∞—á–∞–≤ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å.", show_alert=True)
            return

        remaining_break_seconds = CONFIG.DAILY_BREAK_LIMIT_SECONDS - session_state.get('total_break_seconds', 0)
        if remaining_break_seconds <= 0:
            await query.answer("–£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤.", show_alert=True)
            return
            
        session_state['status'] = 'on_break'
        session_state['break_start_time'] = get_now()
        db.set_session_state(user_id, session_state)
        
        await query.edit_message_text(
            text=f"–í—ã —É—à–ª–∏ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {seconds_to_str(remaining_break_seconds)}.",
            reply_markup=MenuGenerator.get_break_menu()
        )

    async def end_break(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø–µ—Ä–µ—Ä—ã–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ —Ä–∞–±–æ—á–∏–π —Ä–µ–∂–∏–º."""
        query = update.callback_query
        user_id = query.from_user.id
        session_state = db.get_session_state(user_id)
        if not session_state or session_state.get('status') != 'on_break': return

        break_duration = (get_now() - session_state['break_start_time']).total_seconds()
        session_state['total_break_seconds'] = session_state.get('total_break_seconds', 0) + int(break_duration)
        session_state['status'] = 'working'
        del session_state['break_start_time']
        db.set_session_state(user_id, session_state)
        remaining_break_str = seconds_to_str(CONFIG.DAILY_BREAK_LIMIT_SECONDS - session_state['total_break_seconds'])
        await query.edit_message_text(text=f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ —Ä–∞–±–æ—Ç–µ. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {remaining_break_str} –ø–µ—Ä–µ—Ä—ã–≤–∞.", reply_markup=MenuGenerator.get_working_menu())

    async def end_work_use_bank(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å, —Å–ø–∏—Å—ã–≤–∞—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ –≤—Ä–µ–º—è –∏–∑ –±–∞–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏."""
        query = update.callback_query
        user_id = query.from_user.id
        user_info = db.get_user(user_id)
        session_state = db.get_session_state(user_id)
        if not session_state or not user_info: return

        work_duration = (get_now() - session_state['start_time']).total_seconds() - session_state.get('total_break_seconds', 0)
        shortfall_seconds = CONFIG.MIN_WORK_SECONDS - work_duration
        banked_seconds = user_info.get('time_bank_seconds', 0)
        
        if banked_seconds >= shortfall_seconds:
            db.update_time_bank(user_id, -int(shortfall_seconds))
            await query.edit_message_text("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –∑–∞ —Å—á–µ—Ç –±–∞–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏...")
            await end_workday_logic(context, user_id, is_early_leave=True, used_bank_time=shortfall_seconds)
        else:
            needed_str = seconds_to_str(shortfall_seconds - banked_seconds)
            await query.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –±–∞–Ω–∫–µ. –ù—É–∂–Ω–æ –µ—â–µ: {needed_str}", show_alert=True)
            
    async def end_work_ask_manager(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –Ω–∞ —Ä–∞–Ω–Ω–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω—è."""
        query = update.callback_query
        user_id = query.from_user.id
        user_info = db.get_user(user_id)
        if not user_info: return
        
        manager_1, manager_2 = user_info.get('manager_id_1'), user_info.get('manager_id_2')
        if not manager_1 and not manager_2:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –∑–∞ –≤–∞–º–∏ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è.", reply_markup=MenuGenerator.get_working_menu())
            return
        
        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é...")
        request_id = db.create_request(user_id, 'early_leave', {})
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f'approve_{request_id}'), InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'deny_{request_id}')],
            [InlineKeyboardButton("üéâ –û–¥–æ–±—Ä–∏—Ç—å –±–µ–∑ –æ—Ç—Ä–∞–±–æ—Ç–∫–∏", callback_data=f'approve_no_debt_{request_id}')]
        ]
        text_for_manager = f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user_info['full_name']} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–Ω–Ω–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è."
        msg_ids = {}
        if manager_1:
            msg = await context.bot.send_message(manager_1, text_for_manager, reply_markup=InlineKeyboardMarkup(keyboard))
            msg_ids['msg1_id'] = msg.message_id
        if manager_2 and manager_2 != manager_1:
            msg = await context.bot.send_message(manager_2, text_for_manager, reply_markup=InlineKeyboardMarkup(keyboard))
            msg_ids['msg2_id'] = msg.message_id
        db.update_request_messages(request_id, **msg_ids)

    # --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ---
    
    async def absence_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è:", reply_markup=MenuGenerator.get_absence_menu())
    
    async def back_to_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        markup = await MenuGenerator.get_main_menu(query.from_user.id)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

    async def back_to_working_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.callback_query.edit_message_text("–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ.", reply_markup=MenuGenerator.get_working_menu())

    async def back_to_manager_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.callback_query.edit_message_text("–ú–µ–Ω—é —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=MenuGenerator.get_manager_menu())
    
    async def cancel_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.callback_query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    # --- –û—Ç—á–µ—Ç—ã –∏ –ø–æ–º–æ—â—å ---
    
    async def request_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = query.from_user.id
        user_info = db.get_user(user_id)
        if not user_info: return
        
        session_state = db.get_session_state(user_id)
        is_manager = user_info['role'] in ['manager', 'admin']
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:", reply_markup=MenuGenerator.get_report_period_menu(is_manager=is_manager, in_session=bool(session_state)))
        
    async def team_status_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = query.from_user.id
        report_text = await ReportGenerator.get_team_status_text(user_id)
        await context.bot.send_message(user_id, report_text, parse_mode='Markdown')

    async def help_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        from command_handlers import CommandHandlerManager
        await CommandHandlerManager.help_command(update, context)

    # --- –õ–æ–≥–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/–º–µ–Ω–µ–¥–∂–µ—Ä–∞ ---
    
    async def process_manager_decision(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = query.from_user.id
        user_info = db.get_user(user_id)
        if not user_info or user_info.get('role') not in ['manager', 'admin']:
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
            return

        parts = query.data.split('_')
        action = "_".join(parts[:-1])
        request_id = int(parts[-1])
        
        request_info = db.get_request(request_id)
        if not request_info or request_info['status'] != 'pending':
            await query.edit_message_text("–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
            return

        requester_info = db.get_user(request_info['requester_id'])
        if not requester_info:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
            return

        if action == 'ack_request':
            db.update_request_status(request_id, 'acknowledged')
            await query.edit_message_text(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –∫ —Å–≤–µ–¥–µ–Ω–∏—é (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç {requester_info['full_name']}).")
        else:
            new_status = 'approved' if action.startswith('approve') else 'denied'
            db.update_request_status(request_id, new_status)
            
            response_text = f"–í—ã {'–æ–¥–æ–±—Ä–∏–ª–∏' if new_status == 'approved' else '–æ—Ç–∫–ª–æ–Ω–∏–ª–∏'} –∑–∞–ø—Ä–æ—Å –æ—Ç {requester_info['full_name']}"
            if action == 'approve_no_debt': response_text += " (–±–µ–∑ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏)."
            await query.edit_message_text(response_text)
            
            text_to_employee = f"–í–∞—à –∑–∞–ø—Ä–æ—Å ('{request_info.get('request_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}') –±—ã–ª {'–æ–¥–æ–±—Ä–µ–Ω' if new_status == 'approved' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω'}."
            
            if request_info['request_type'] == 'early_leave' and new_status == 'approved':
                forgive_debt = (action == 'approve_no_debt')
                await end_workday_logic(context, requester_info['user_id'], is_early_leave=True, forgive_debt=forgive_debt)
            
            await context.bot.send_message(requester_info['user_id'], text_to_employee)

    async def user_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        target_user_id = int(query.data.split('_')[-1])
        info = db.get_user(target_user_id)
        if not info:
            await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."); return
            
        text = (f"**–ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**\n–ò–º—è: {info['full_name']}\nID: `{info['user_id']}`\n–†–æ–ª—å: {info['role']}\n"
                f"–ë–∞–Ω–∫ –≤—Ä–µ–º–µ–Ω–∏: {seconds_to_str(info.get('time_bank_seconds',0))}\n"
                f"ID –†—É–∫. 1: {info.get('manager_id_1', '–ù/–î')}\nID –†—É–∫. 2: {info.get('manager_id_2', '–ù/–î')}")
        keyboard = [
            # –ó–∞–º–µ–Ω–∏–ª–∏ –ø—Ä—è–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞ –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /deluser –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="show_all_users")]
        ]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        
    async def show_all_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        from command_handlers import CommandHandlerManager
        await CommandHandlerManager.list_users(update, context)

    async def confirm_delete(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        target_user_id = int(query.data.split('_')[-1])
        info = db.get_user(target_user_id)
        if not info:
            await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É–¥–∞–ª–µ–Ω."); return
        
        db.delete_user(target_user_id)
        await query.edit_message_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {info['full_name']} —É–¥–∞–ª–µ–Ω.")
        
    async def generate_period_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = query.from_user.id
        command = query.data
        
        report_type = command.split('_')[-1]
        today = get_now().date()
        
        if 'today' in command:
            start_date, end_date = today, today
        else: # this_month
            start_date = today.replace(day=1)
            next_month = start_date.replace(day=28) + datetime.timedelta(days=4)
            end_date = next_month - datetime.timedelta(days=next_month.day)
        
        await query.delete_message()
        if report_type == 'manager':
            report_text = await ReportGenerator.get_manager_report_text(user_id, start_date, end_date)
            reply_markup = MenuGenerator.get_manager_menu()
        else:
            report_text = await ReportGenerator.get_employee_report_text(user_id, start_date, end_date)
            is_in_session = bool(db.get_session_state(user_id))
            reply_markup = MenuGenerator.get_working_menu() if is_in_session else await MenuGenerator.get_main_menu(user_id)
            
        await context.bot.send_message(user_id, report_text, parse_mode='Markdown', reply_markup=reply_markup)
        
    # --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ---
    
    async def additional_work_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã:", reply_markup=MenuGenerator.get_additional_work_menu(query.from_user.id))

    async def start_debt_work(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self._start_extra_work(update, 'clearing_debt')

    async def start_banking_work(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self._start_extra_work(update, 'banking_time', notify_manager=True, bot=context.bot)

    async def end_debt_work(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self._end_extra_work(update, context)

    async def end_banking_work(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self._end_extra_work(update, context)

    async def _start_extra_work(self, update: Update, status: str, notify_manager: bool = False, bot=None):
        query = update.callback_query
        user_id = query.from_user.id
        start_time = get_now()
        db.set_session_state(user_id, {'status': status, 'start_time': start_time})
        text, markup = MenuGenerator.get_extra_work_active_menu(status, start_time)
        await query.edit_message_text(text, reply_markup=markup)

        if notify_manager:
            user_info = db.get_user(user_id)
            if not user_info or (not user_info.get('manager_id_1') and not user_info.get('manager_id_2')): return
            text_for_manager = f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user_info['full_name']} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –±–∞–Ω–∫ –≤—Ä–µ–º–µ–Ω–∏."
            request_id = db.create_request(user_id, 'banking_work', {})
            keyboard = [[InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ", callback_data=f'ack_request_{request_id}')]]
            msg_ids = {}
            if user_info.get('manager_id_1'):
                msg = await bot.send_message(user_info['manager_id_1'], text_for_manager, reply_markup=InlineKeyboardMarkup(keyboard))
                msg_ids['msg1_id'] = msg.message_id
            if user_info.get('manager_id_2') and user_info.get('manager_id_2') != user_info.get('manager_id_1'):
                msg = await bot.send_message(user_info['manager_id_2'], text_for_manager, reply_markup=InlineKeyboardMarkup(keyboard))
                msg_ids['msg2_id'] = msg.message_id
            db.update_request_messages(request_id, **msg_ids)

    async def _end_extra_work(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = query.from_user.id
        session_state = db.get_session_state(user_id)
        if not session_state: return

        start_time = session_state['start_time']
        status = session_state['status']
        worked_seconds = (get_now() - start_time).total_seconds()
        
        if status == 'clearing_debt':
            db.clear_work_debt(user_id, int(worked_seconds))
            db.add_debt_log(user_id, start_time, get_now(), int(worked_seconds))
            text = f"–ó–∞—á—Ç–µ–Ω–æ –≤ —Å—á–µ—Ç –æ—Ç—Ä–∞–±–æ—Ç–∫–∏: {seconds_to_str(worked_seconds)}."
        elif status == 'banking_time':
            db.update_time_bank(user_id, int(worked_seconds))
            db.add_work_log(user_id, start_time, get_now(), int(worked_seconds), 0, 'banking')
            text = f"–†–∞–±–æ—Ç–∞ –≤ –±–∞–Ω–∫ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã –Ω–∞–∫–æ–ø–∏–ª–∏: {seconds_to_str(worked_seconds)}."
        else:
            return

        db.delete_session_state(user_id)
        await query.edit_message_text(text, reply_markup=await MenuGenerator.get_main_menu(user_id))

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ bot.py
callback_manager = CallbackHandlerManager()
