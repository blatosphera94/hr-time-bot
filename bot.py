# =================================================================
#          –ö–û–î BOT.PY - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
# =================================================================
import datetime
import json
import re
import os
import pytz
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, ContextTypes, CallbackQueryHandler,
    ConversationHandler, MessageHandler, filters
)
import database as db

# --- –ó–ê–ì–†–£–ó–ö–ê –°–ï–ö–†–ï–¢–ù–´–• –î–ê–ù–ù–´–• –ò –ù–ê–°–¢–†–û–ô–ö–ò ---
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
LOCAL_TZ = pytz.timezone('Asia/Barnaul')

ADMIN_IDS = [384630608] 
DAILY_BREAK_LIMIT_SECONDS = 3600
MIN_WORK_SECONDS = 8 * 3600

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
GET_DATES_TEXT, GET_REPORT_DATES = range(2)

absence_type_map = {
    'absence_sick': '–ë–æ–ª—å–Ω–∏—á–Ω—ã–π', 'absence_vacation': '–û—Ç–ø—É—Å–∫',
    'absence_trip': '–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞', 'request_remote_work': '–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
    'request_day_off': '–û—Ç–≥—É–ª'
}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_now():
    return datetime.datetime.now(LOCAL_TZ)

def seconds_to_str(seconds):
    if not isinstance(seconds, (int, float)) or seconds < 0: seconds = 0
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    return f"{hours} —á {minutes} –º–∏–Ω"

async def end_workday_logic(update, context: ContextTypes.DEFAULT_TYPE, user_id, is_early_leave=False, forgive_debt=False, used_bank_time=0):
    session_state = db.get_session_state(user_id)
    if not session_state: return
    start_time = session_state['start_time']
    end_time = get_now()
    total_break_seconds = session_state.get('total_break_seconds', 0)
    work_duration_seconds = (end_time - start_time).total_seconds() - total_break_seconds
    work_type = "remote" if session_state.get('is_remote') else "office"
    db.add_work_log(user_id, start_time, end_time, int(work_duration_seconds), total_break_seconds, work_type)
    
    if not is_early_leave and session_state.get('status') == 'working':
        unused_break_time = DAILY_BREAK_LIMIT_SECONDS - total_break_seconds
        if unused_break_time > 0:
            db.update_time_bank(user_id, unused_break_time)

    db.delete_session_state(user_id)
    
    work_time_str = seconds_to_str(work_duration_seconds)
    message_text = f"–†–∞–±–æ—á–∏–π –¥–µ–Ω—å ({'—É–¥–∞–ª–µ–Ω–Ω–æ' if work_type == 'remote' else '–≤ –æ—Ñ–∏—Å–µ'}) –∑–∞–≤–µ—Ä—à–µ–Ω. –í—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏: {work_time_str}."

    if used_bank_time > 0:
        message_text += f"\n–ò–∑ –±–∞–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–ø–∏—Å–∞–Ω–æ: {seconds_to_str(int(used_bank_time))}."
    elif is_early_leave and not forgive_debt:
        debt_seconds = MIN_WORK_SECONDS - work_duration_seconds
        if debt_seconds > 0:
            db.add_work_debt(user_id, int(debt_seconds))
            debt_str = seconds_to_str(debt_seconds)
            message_text += f"\n\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∫–∞: **{debt_str}**."
    
    main_menu_markup = await get_main_menu(update, context, user_id)
    if main_menu_markup:
        await context.bot.send_message(user_id, message_text, reply_markup=main_menu_markup, parse_mode='Markdown')
    else:
        await context.bot.send_message(user_id, message_text, parse_mode='Markdown')

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é ---
async def get_main_menu(update, context, user_id):
    today = get_now().date()
    
    absences = db.get_absences_for_user(user_id, today)
    if absences:
        absence = absences[0]
        absence_type = absence['absence_type'].lower()
        end_date_str = absence['end_date'].strftime('%d.%m.%Y')
        messages = {
            '–æ—Ç–ø—É—Å–∫': f"–í—ã –≤ –æ—Ç–ø—É—Å–∫–µ –¥–æ {end_date_str}. –•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!",
            '–±–æ–ª—å–Ω–∏—á–Ω—ã–π': f"–í—ã –Ω–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–º –¥–æ {end_date_str}. –°–∫–æ—Ä–µ–π—à–µ–≥–æ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—è!",
            '–∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞': f"–í—ã –≤ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–µ –¥–æ {end_date_str}. –£—Å–ø–µ—à–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏!"
        }
        text = messages.get(absence_type, f"–£ –≤–∞—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–æ {end_date_str}.")
        
        if update and hasattr(update, 'message') and update.message:
            await update.message.reply_text(text)
        elif update and hasattr(update, 'callback_query') and update.callback_query:
             await update.callback_query.edit_message_text(text)
        elif context:
            await context.bot.send_message(user_id, text)
        return None

    is_weekend = today.weekday() >= 5
    today_logs = db.get_todays_work_log_for_user(user_id)
    if today_logs and not is_weekend:
        is_weekend = True

    if is_weekend:
        keyboard = [
            [InlineKeyboardButton("üõ†Ô∏è –î–æ–ø. —Ä–∞–±–æ—Ç–∞", callback_data='additional_work_menu')],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help_button')]
        ]
    else:
        today_str = str(today)
        approved_remote_work = db.get_approved_request(user_id, '–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞', today_str)
        keyboard = []
        if approved_remote_work:
            keyboard.append([InlineKeyboardButton("‚òÄÔ∏è –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É (—É–¥–∞–ª–µ–Ω–Ω–æ)", callback_data='start_work_remote')])
        else:
            keyboard.append([InlineKeyboardButton("‚òÄÔ∏è –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å", callback_data='start_work_office')])
        keyboard.extend([
            [InlineKeyboardButton("üè¶ –ë–∞–Ω–∫ –≤—Ä–µ–º–µ–Ω–∏", callback_data='show_time_bank')],
            [InlineKeyboardButton("üõ†Ô∏è –î–æ–ø. —Ä–∞–±–æ—Ç–∞", callback_data='additional_work_menu')],
            [InlineKeyboardButton("üìù –û—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ", callback_data='absence_menu')],
            [InlineKeyboardButton("üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data='request_report')],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help_button')]
        ])
    return InlineKeyboardMarkup(keyboard)

def get_manager_menu():
    keyboard = [
        [InlineKeyboardButton("üë®‚Äçüíª –°—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã", callback_data='team_status_button')],
        [InlineKeyboardButton("üìä –û—Ç—á–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ", callback_data='manager_report_button')],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help_button')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_report_period_menu(is_manager=False, in_session=False):
    base_callback = "manager" if is_manager else "employee"
    keyboard = [
        [InlineKeyboardButton("üìä –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data=f'report_today_{base_callback}')],
        [InlineKeyboardButton("üóìÔ∏è –û—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data=f'report_this_month_{base_callback}')],
        [InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", callback_data=f'report_custom_period_{base_callback}')]
    ]
    back_button_data = 'back_to_main_menu'
    if is_manager:
        back_button_data = 'back_to_manager_menu'
    elif in_session:
        back_button_data = 'back_to_working_menu'
    keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=back_button_data)])
    return InlineKeyboardMarkup(keyboard)

def get_additional_work_menu(user_id):
    total_debt_seconds = db.get_total_debt(user_id)
    keyboard = [[InlineKeyboardButton("üè¶ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤ –±–∞–Ω–∫ –≤—Ä–µ–º–µ–Ω–∏", callback_data='start_banking_work')]]
    if total_debt_seconds > 0:
        debt_str = seconds_to_str(total_debt_seconds)
        keyboard.insert(0, [InlineKeyboardButton(f"–ü–æ–≥–∞—Å–∏—Ç—å –¥–æ–ª–≥ ({debt_str})", callback_data='start_debt_work')])
    
    keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_main_menu')])
    return InlineKeyboardMarkup(keyboard)

def get_extra_work_active_menu(status, start_time):
    duration_str = seconds_to_str((get_now() - start_time).total_seconds())
    
    if status == 'clearing_debt':
        text = f"–ò–¥–µ—Ç –æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ª–≥–∞. –ü—Ä–æ—à–ª–æ: {duration_str}"
        button_text = "–ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç—Ä–∞–±–æ—Ç–∫—É"
        callback_data = "end_debt_work"
    else: # banking_time
        text = f"–ò–¥–µ—Ç —Ä–∞–±–æ—Ç–∞ –≤ –±–∞–Ω–∫ –≤—Ä–µ–º–µ–Ω–∏. –ù–∞–∫–æ–ø–ª–µ–Ω–æ: {duration_str}"
        button_text = "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ –±–∞–Ω–∫"
        callback_data = "end_banking_work"

    keyboard = [[InlineKeyboardButton(button_text, callback_data=callback_data)]]
    return text, InlineKeyboardMarkup(keyboard)

def get_absence_menu():
    keyboard = [[InlineKeyboardButton("üíª –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (–∑–∞–ø—Ä–æ—Å)", callback_data='request_remote_work')], [InlineKeyboardButton("üôã‚Äç‚ôÇÔ∏è –ü–æ–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–≥—É–ª", callback_data='request_day_off')], [InlineKeyboardButton("ü§ß –ë–æ–ª—å–Ω–∏—á–Ω—ã–π", callback_data='absence_sick')], [InlineKeyboardButton("üå¥ –û—Ç–ø—É—Å–∫", callback_data='absence_vacation')], [InlineKeyboardButton("‚úàÔ∏è –ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞", callback_data='absence_trip')], [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_main_menu')]]
    return InlineKeyboardMarkup(keyboard)

def get_working_menu():
    keyboard = [[InlineKeyboardButton("üåô –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å", callback_data='end_work')], [InlineKeyboardButton("‚òï –£–π—Ç–∏ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤", callback_data='start_break_choice')], [InlineKeyboardButton("üè¶ –ë–∞–Ω–∫ –≤—Ä–µ–º–µ–Ω–∏", callback_data='show_time_bank')], [InlineKeyboardButton("üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data='request_report'), InlineKeyboardButton("‚è±Ô∏è –ú–æ–µ –≤—Ä–µ–º—è", callback_data='show_status')], [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help_button')]]
    return InlineKeyboardMarkup(keyboard)

def get_break_menu():
    keyboard = [[InlineKeyboardButton("‚ñ∂Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è —Å –ø–µ—Ä–µ—Ä—ã–≤–∞", callback_data='end_break')], [InlineKeyboardButton("üè¶ –ë–∞–Ω–∫ –≤—Ä–µ–º–µ–Ω–∏", callback_data='show_time_bank')], [InlineKeyboardButton("üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data='request_report'), InlineKeyboardButton("‚è±Ô∏è –ú–æ–µ –≤—Ä–µ–º—è", callback_data='show_status')], [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help_button')]]
    return InlineKeyboardMarkup(keyboard)

def get_early_leave_menu():
    keyboard = [
        [InlineKeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–Ω–∫ –≤—Ä–µ–º–µ–Ω–∏", callback_data='end_work_use_bank')],
        [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ", callback_data='end_work_ask_manager')],
        [InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data='back_to_working_menu')]
    ]
    return InlineKeyboardMarkup(keyboard)

# --- –õ–æ–≥–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ ---
async def ask_for_dates_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    absence_type = query.data
    context.user_data['absence_type'] = absence_type
    absence_name = absence_type_map.get(absence_type, "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ").lower()
    prompt_text = f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –¥–ª—è '{absence_name}', –Ω–∞–ø—Ä–∏–º–µ—Ä: 01.08.2025 - 15.08.2025"
    if absence_type in ['request_remote_work', 'request_day_off']:
        prompt_text = f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è '{absence_name}', –Ω–∞–ø—Ä–∏–º–µ—Ä: 15.08.2025"
    await query.edit_message_text(f"{prompt_text}\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
    return GET_DATES_TEXT

async def process_dates_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    user_input = update.message.text
    absence_type_key = context.user_data.get('absence_type')
    absence_name = absence_type_map.get(absence_type_key, "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ")
    try:
        found_dates = re.findall(r'\b(\d{1,2})\.(\d{1,2})\.(\d{2,4})\b', user_input)
        if len(found_dates) < 1:
            await update.message.reply_text("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–π –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            return GET_DATES_TEXT
        parsed_dates = []
        for day, month, year in found_dates:
            if len(year) == 2: year = f"20{year}"
            parsed_dates.append(datetime.date(int(year), int(month), int(day)))
        start_date = min(parsed_dates)
        end_date = max(parsed_dates) if len(parsed_dates) > 1 else start_date
        user_info = db.get_user(user.id)
        
        if absence_type_key in ['request_remote_work', 'request_day_off']:
            if not user_info or (not user_info.get('manager_id_1') and not user_info.get('manager_id_2')):
                await update.message.reply_text("–û—à–∏–±–∫–∞: –∑–∞ –≤–∞–º–∏ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å.", reply_markup=await get_main_menu(update, context, user.id))
                return ConversationHandler.END
            text_for_manager = f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user_info['full_name']} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç '{absence_name}' –Ω–∞ {start_date.strftime('%d.%m.%Y')}."
            request_type_for_db = '–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞' if absence_type_key == 'request_remote_work' else '–û—Ç–≥—É–ª'
            request_id = db.create_request(user.id, request_type_for_db, {'date': str(start_date)})
            keyboard = [[InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f'approve_{request_id}'), InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'deny_{request_id}')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            msg_id_1, msg_id_2 = None, None
            if user_info.get('manager_id_1'):
                msg1 = await context.bot.send_message(user_info['manager_id_1'], text_for_manager, reply_markup=reply_markup)
                msg_id_1 = msg1.message_id
            if user_info.get('manager_id_2') and user_info.get('manager_id_2') != user_info.get('manager_id_1'):
                msg2 = await context.bot.send_message(user_info['manager_id_2'], text_for_manager, reply_markup=reply_markup)
                msg_id_2 = msg2.message_id
            db.update_request_messages(request_id, msg_id_1, msg_id_2)
            await update.message.reply_text(f"–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ '{absence_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=await get_main_menu(update, context, user.id))
        else:
            db.add_absence(user.id, absence_name, str(start_date), str(end_date))
            await update.message.reply_text(f"{absence_name} —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", reply_markup=await get_main_menu(update, context, user.id))
            if user_info:
                text_for_manager = (f"FYI: –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user_info['full_name']} –æ—Ñ–æ—Ä–º–∏–ª '{absence_name}' —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}.")
                if user_info.get('manager_id_1'): await context.bot.send_message(user_info['manager_id_1'], text_for_manager)
                if user_info.get('manager_id_2') and user_info.get('manager_id_2') != user_info.get('manager_id_1'): await context.bot.send_message(user_info['manager_id_2'], text_for_manager)
        
        context.user_data.clear()
        return ConversationHandler.END
    except (ValueError, TypeError):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return GET_DATES_TEXT

async def ask_for_report_dates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    report_type = query.data.split('_')[-1]
    context.user_data['report_type'] = report_type
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
    return GET_REPORT_DATES

async def process_report_dates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    user_info = db.get_user(user_id)
    report_type = context.user_data.get('report_type')
    try:
        found_dates = re.findall(r'\b(\d{1,2})\.(\d{1,2})\.(\d{2,4})\b', update.message.text)
        if len(found_dates) < 1:
            await update.message.reply_text("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –¥–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì")
            return GET_REPORT_DATES
        parsed_dates = []
        for day, month, year in found_dates:
            if len(year) == 2: year = f"20{year}"
            parsed_dates.append(datetime.date(int(year), int(month), int(day)))
        start_date = min(parsed_dates)
        end_date = max(parsed_dates) if len(parsed_dates) > 1 else start_date
        
        await update.message.delete()
        
        if report_type == 'manager':
            await send_manager_report(user_id, context, start_date, end_date)
        else:
            await send_employee_report(user_id, context, start_date, end_date)
            
        return ConversationHandler.END
    except (ValueError, TypeError):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel")
        return GET_REPORT_DATES

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    user_info = db.get_user(user_id)
    session_state = db.get_session_state(user_id)
    
    text = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    reply_markup = await get_main_menu(update, context, user_id)
    if reply_markup is None:
        return ConversationHandler.END
        
    if user_info and user_info['role'] in ['manager', 'admin']:
        reply_markup = get_manager_menu()
    elif session_state:
        reply_markup = get_working_menu()
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)

    context.user_data.clear()
    return ConversationHandler.END

# --- –õ–æ–≥–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤ ---
async def send_employee_report(user_id, context: ContextTypes.DEFAULT_TYPE, start_date, end_date):
    work_logs = db.get_work_logs_for_user(user_id, str(start_date), str(end_date + datetime.timedelta(days=1)))
    total_work_seconds = sum(log['total_work_seconds'] for log in work_logs)
    total_break_seconds = sum(log['total_break_seconds'] for log in work_logs)
    report_text = f"**–û—Ç—á–µ—Ç –¥–ª—è –≤–∞—Å –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}**\n\n"
    report_text += f"**–ß–∏—Å—Ç–æ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:** {seconds_to_str(total_work_seconds)}\n"
    report_text += f"**–í—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö:** {seconds_to_str(total_break_seconds)}\n\n"
    
    cleared_debt = db.get_debt_logs_for_user(user_id, str(start_date), str(end_date + datetime.timedelta(days=1)))
    total_current_debt = db.get_total_debt(user_id)
    if cleared_debt > 0 or total_current_debt > 0:
        report_text += f"**–û—Ç—Ä–∞–±–æ—Ç–∫–∞:**\n"
        report_text += f"–ó–∞–∫—Ä—ã—Ç–æ –¥–æ–ª–≥–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {seconds_to_str(cleared_debt)}\n"
        report_text += f"–û–±—â–∏–π —Ç–µ–∫—É—â–∏–π –¥–æ–ª–≥: {seconds_to_str(total_current_debt)}"

    session_state = db.get_session_state(user_id)
    back_callback = 'back_to_working_menu' if session_state else 'back_to_main_menu'
    keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=back_callback)]]
    await context.bot.send_message(chat_id=user_id, text=report_text, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))

async def send_manager_report(manager_id, context: ContextTypes.DEFAULT_TYPE, start_date, end_date):
    team_members = db.get_managed_users(manager_id)
    if not team_members:
        await context.bot.send_message(chat_id=manager_id, text="–ó–∞ –≤–∞–º–∏ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
        return
        
    report_lines = [f"**–û—Ç—á–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}**\n"]
    
    for member in team_members:
        member_id = member['user_id']
        member_name = member['full_name']
        
        logs = db.get_work_logs_for_user(member_id, str(start_date), str(end_date + datetime.timedelta(days=1)))
        absences = db.get_absences_for_user(member_id, start_date, end_date)
        
        employee_line = f"üë§ **{member_name}**:"
        
        if logs:
            total_work_seconds_member = sum(log['total_work_seconds'] for log in logs)
            total_break_seconds_member = sum(log['total_break_seconds'] for log in logs)
            employee_line += f" –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ {seconds_to_str(total_work_seconds_member)} (–ø–µ—Ä–µ—Ä—ã–≤—ã: {seconds_to_str(total_break_seconds_member)})."
        
        if absences:
            absence_details = []
            for a in absences:
                start_str = a['start_date'].strftime('%d.%m')
                end_str = a['end_date'].strftime('%d.%m')
                period = start_str if start_str == end_str else f"{start_str}-{end_str}"
                absence_details.append(f"{a['absence_type']} ({period})")
            
            if logs:
                employee_line += f"\n  - *–û—Ç—Å—É—Ç—Å—Ç–≤–∏—è:* {', '.join(absence_details)}"
            else:
                 employee_line += f" *{', '.join(absence_details)}.*"
        
        if not logs and not absences:
            employee_line += " –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥."
            
        report_lines.append(employee_line)

    report_text = "\n".join(report_lines)
    keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_manager_menu')]]
    await context.bot.send_message(chat_id=manager_id, text=report_text, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))

async def get_team_status_logic(manager_id, context: ContextTypes.DEFAULT_TYPE):
    team_members = db.get_managed_users(manager_id)
    if not team_members:
        await context.bot.send_message(chat_id=manager_id, text="–ó–∞ –≤–∞–º–∏ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
        return
    
    status_lines = [f"**–°—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã –Ω–∞ {get_now().strftime('%d.%m.%Y %H:%M')}**\n"]
    today = get_now().date()
    
    for member in team_members:
        member_id = member['user_id']
        member_name = member['full_name']
        session = db.get_session_state(member_id)
        
        if session and session.get('status'):
            status = session.get('status')
            start_time = session.get('start_time')
            if status == 'working':
                status_lines.append(f"üü¢ {member_name}: –†–∞–±–æ—Ç–∞–µ—Ç —Å {start_time.strftime('%H:%M')}")
            elif status == 'on_break':
                break_start = session.get('break_start_time')
                status_lines.append(f"‚òïÔ∏è {member_name}: –ù–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ —Å {break_start.strftime('%H:%M')}")
            else:
                status_lines.append(f"‚öôÔ∏è {member_name}: –î–æ–ø. —Ä–∞–±–æ—Ç–∞ —Å {start_time.strftime('%H:%M')}")
        else:
            absences = db.get_absences_for_user(member_id, today)
            if absences:
                status_lines.append(f"üèñÔ∏è {member_name}: {absences[0]['absence_type']}")
            else:
                last_log = db.get_todays_work_log_for_user(member_id)
                if last_log:
                    status_lines.append(f"‚ö™Ô∏è {member_name}: –ó–∞–∫–æ–Ω—á–∏–ª —Ä–∞–±–æ—Ç—É –≤ {last_log['end_time'].astimezone(LOCAL_TZ).strftime('%H:%M')}")
                else:
                    status_lines.append(f"‚ö™Ô∏è {member_name}: –ù–µ –≤ —Å–µ—Ç–∏")

    await context.bot.send_message(chat_id=manager_id, text="\n".join(status_lines), parse_mode='Markdown')

# --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    user_info = db.get_user(user.id)
    if not user_info:
        await update.message.reply_text("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    main_menu_markup = await get_main_menu(update, context, user.id)
    if main_menu_markup is None:
        return

    if user_info['role'] in ['manager', 'admin']:
        await update.message.reply_text("–ú–µ–Ω—é —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=get_manager_menu())
        return
        
    session_state = db.get_session_state(user.id)
    if not session_state or not session_state.get('status'):
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_markup)
    else:
        status = session_state.get('status')
        if status == 'working': await update.message.reply_text("–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ. –ú–µ–Ω—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:", reply_markup=get_working_menu())
        elif status == 'on_break': await update.message.reply_text("–í—ã –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ. –ú–µ–Ω—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:", reply_markup=get_break_menu())
        elif status in ['clearing_debt', 'banking_time']:
            text, markup = get_extra_work_active_menu(status, session_state['start_time'])
            await update.message.reply_text(text, reply_markup=markup)

async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    admin_id = update.effective_user.id
    if admin_id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        args = context.args
        if len(args) < 2:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /adduser ID \"–ò–º—è –§–∞–º–∏–ª–∏—è\" [—Ä–æ–ª—å] [ID_—Ä—É–∫_1] [ID_—Ä—É–∫_2]")
            return
        
        user_id_str = args[0]
        match = re.search(r'"(.*?)"', " ".join(args[1:]))
        if not match:
            full_name = args[1]
            remaining_args = args[2:]
        else:
            full_name = match.group(1)
            remaining_args_str = " ".join(args[1:]).replace(f'"{full_name}"', '').strip()
            remaining_args = remaining_args_str.split()

        target_user_id = int(user_id_str)
        role = 'employee'
        manager_1 = None
        manager_2 = None
        
        if len(remaining_args) > 0: role = remaining_args[0]
        if len(remaining_args) > 1: manager_1 = int(remaining_args[1])
        if len(remaining_args) > 2: manager_2 = int(remaining_args[2])

        db.add_or_update_user(target_user_id, full_name, role, manager_1, manager_2)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} (ID: {target_user_id}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    except (IndexError, ValueError) as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")

async def show_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    admin_id = update.effective_user.id
    if admin_id not in ADMIN_IDS: return
    all_users = db.get_all_users()
    if not all_users:
        await update.message.reply_text("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    keyboard = [[InlineKeyboardButton(f"{user['full_name']} ({user['role']})", callback_data=f"user_details_{user['user_id']}")] for user in all_users]
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=InlineKeyboardMarkup(keyboard))

async def deluser_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    admin_id = update.effective_user.id
    if admin_id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        target_user_id = int(context.args[0])
        user_info = db.get_user(target_user_id)
        if not user_info:
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        db.delete_user(target_user_id)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info['full_name']} (ID: {target_user_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    except (IndexError, ValueError):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /deluser <ID>")

async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_info = db.get_user(update.effective_user.id)
    session_state = db.get_session_state(update.effective_user.id)
    is_manager = user_info and user_info['role'] in ['manager', 'admin']
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:", reply_markup=get_report_period_menu(is_manager=is_manager, in_session=bool(session_state)))

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_info = db.get_user(user_id)
    help_text = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
    if user_info and user_info['role'] == 'admin':
        help_text += ("**–í—ã ‚Äî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.**\n\n"
                      "`/adduser ID \"–ò–º—è –§–∞–º–∏–ª–∏—è\" [—Ä–æ–ª—å] [ID_—Ä—É–∫]` - –¥–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
                      "`/users` - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
                      "`/deluser ID` - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID.\n"
                      "`/report` - –æ—Ç—á–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ.\n"
                      "`/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞.")
    elif user_info and user_info['role'] == 'manager':
        help_text += ("**–í—ã ‚Äî –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å.**\n\n"
                      "–ö–æ–º–∞–Ω–¥–∞ `/start` –≤—ã–∑–æ–≤–µ—Ç –≤–∞—à–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ.\n"
                      "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–≥—É–ª–æ–≤, —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ —Ä–∞–Ω–Ω–µ–≥–æ —É—Ö–æ–¥–∞ –æ—Ç –≤–∞—à–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –†–µ–∞–≥–∏—Ä—É–π—Ç–µ –Ω–∞ –Ω–∏—Ö –∫–Ω–æ–ø–∫–∞–º–∏.\n"
                      "`/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞.")
    elif user_info and user_info['role'] == 'employee':
        help_text += ("**–í—ã ‚Äî –°–æ—Ç—Ä—É–¥–Ω–∏–∫.**\n\n"
                      "- –ù–∞—á–∏–Ω–∞–π—Ç–µ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–π—Ç–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –∫–Ω–æ–ø–∫–∞–º–∏.\n"
                      "- –§–∏–∫—Å–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤—ã.\n"
                      "- –ó–∞–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω—é '–û—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ'.\n"
                      "- –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ '–ë–∞–Ω–∫–µ –≤—Ä–µ–º–µ–Ω–∏'.\n"
                      "`/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞.")
    else:
        help_text += "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    
    if update.callback_query:
        await context.bot.send_message(chat_id=user_id, text=help_text, parse_mode='Markdown')
    else:
        await update.message.reply_text(help_text, parse_mode='Markdown')

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ---
async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    command = query.data
    
    session_state = db.get_session_state(user_id)
    user_info = db.get_user(user_id)
    is_manager = user_info and user_info['role'] in ['manager', 'admin']
    
    # ... (–∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–æ–∫) ...

# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
def main() -> None:
    db.init_db()
    
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        print("–û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    application = Application.builder().token(token).build()
    
    application.add_error_handler(error_handler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    absence_conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(ask_for_dates_text, pattern='^request_remote_work$'),
            CallbackQueryHandler(ask_for_dates_text, pattern='^absence_sick$'),
            CallbackQueryHandler(ask_for_dates_text, pattern='^absence_vacation$'),
            CallbackQueryHandler(ask_for_dates_text, pattern='^absence_trip$'),
            CallbackQueryHandler(ask_for_dates_text, pattern='^request_day_off$'),
        ],
        states={GET_DATES_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_dates_text)]},
        fallbacks=[CommandHandler('cancel', cancel_conversation)],
    )
    report_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(ask_for_report_dates, pattern='^report_custom_period_')],
        states={GET_REPORT_DATES: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_report_dates)]},
        fallbacks=[CommandHandler('cancel', cancel_conversation)],
    )

    application.add_handler(absence_conv_handler)
    application.add_handler(report_conv_handler)
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("adduser", add_user))
    application.add_handler(CommandHandler("users", show_users))
    application.add_handler(CommandHandler("deluser", deluser_command))
    application.add_handler(CommandHandler("report", report_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(button_callback_handler))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()