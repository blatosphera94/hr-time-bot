# –§–∞–π–ª: command_handlers.py (–ü–æ–ª–Ω–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import re
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
import database as db
from utils import admin_only, get_now
from menu_generator import MenuGenerator
from config import CONFIG

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤
from conversation_handlers import GET_USERS_FILE 

logger = logging.getLogger(__name__)

class CommandHandlerManager:
    @staticmethod
    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_info = db.get_user(user_id)
        if not user_info:
            await update.message.reply_text("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        today = get_now().date()
        absences = db.get_absences_for_user(user_id, today)
        
        if absences:
            absence = absences[0]
            absence_type_key = next((key for key, value in CONFIG.ABSENCE_TYPE_MAP.items() if value == absence['absence_type']), None)
            end_date_str = absence['end_date'].strftime('%d.%m.%Y')
            if absence_type_key == 'absence_sick_child':
                text = (f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {update.effective_user.first_name}.\n"
                        f"–£ –≤–∞—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω –±–æ–ª—å–Ω–∏—á–Ω—ã–π –ø–æ —É—Ö–æ–¥—É –¥–æ {end_date_str}. "
                        f"–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ.")
                buttons = [{"text": "üíª –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É (—É–¥–∞–ª–µ–Ω–Ω–æ)", "callback": "start_work_remote"}, {"text": "‚ùì –ü–æ–º–æ—â—å", "callback": "help_button"}]
                await update.message.reply_text(text, reply_markup=MenuGenerator.generate_from_list(buttons))
                return
            else:
                messages = { 'absence_vacation': f"–í—ã –≤ –æ—Ç–ø—É—Å–∫–µ –¥–æ {end_date_str}. –•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!", 'absence_sick': f"–í—ã –Ω–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–º –¥–æ {end_date_str}. –°–∫–æ—Ä–µ–π—à–µ–≥–æ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—è!", 'absence_trip': f"–í—ã –≤ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–µ –¥–æ {end_date_str}. –£—Å–ø–µ—à–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏!"}
                text = messages.get(absence_type_key, f"–£ –≤–∞—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–æ {end_date_str}.")
                await update.message.reply_text(text)
                return

        role = user_info.get('role', 'employee')
        if role in ['admin', 'manager']:
            await update.message.reply_text("–ú–µ–Ω—é —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=MenuGenerator.get_manager_menu())
            return
        
        session_state = db.get_session_state(user_id)
        if not session_state or not session_state.get('status'):
            main_menu_markup = await MenuGenerator.get_main_menu(user_id)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_markup)
        else:
            status = session_state.get('status')
            if status == 'working': await update.message.reply_text("–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ. –ú–µ–Ω—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:", reply_markup=MenuGenerator.get_working_menu())
            elif status == 'on_break': await update.message.reply_text("–í—ã –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ. –ú–µ–Ω—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:", reply_markup=MenuGenerator.get_break_menu())
            elif status in ['clearing_debt', 'banking_time']:
                text, markup = MenuGenerator.get_extra_work_active_menu(status, session_state['start_time'])
                await update.message.reply_text(text, reply_markup=markup)

    @staticmethod
    @admin_only
    async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            args = context.args
            if len(args) < 2:
                await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /adduser ID \"–ò–º—è –§–∞–º–∏–ª–∏—è\" [—Ä–æ–ª—å] [ID_—Ä—É–∫_1] [ID_—Ä—É–∫_2]")
                return
            user_id_str = args[0]
            match = re.search(r'"(.*?)"', " ".join(args[1:]))
            if not match:
                full_name = args[1]
                remaining_args = args[2:]
            else:
                full_name = match.group(1)
                remaining_args_str = " ".join(args[1:]).replace(f'"{full_name}"', '').strip()
                remaining_args = remaining_args_str.split()
            target_user_id = int(user_id_str)
            role = 'employee'
            manager_1, manager_2 = None, None
            if len(remaining_args) > 0: role = remaining_args[0]
            if len(remaining_args) > 1: manager_1 = int(remaining_args[1])
            if len(remaining_args) > 2: manager_2 = int(remaining_args[2])
            db.add_or_update_user(target_user_id, full_name, role, manager_1, manager_2)
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} (ID: {target_user_id}) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
        except (IndexError, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ adduser: {e}")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
    
    @staticmethod
    @admin_only
    async def upload_users_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .csv –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
            "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: `telegram_id,full_name,role,manager_id_1,manager_id_2`\n"
            "–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ò–º—è —Å –ø—Ä–æ–±–µ–ª–æ–º –∑–∞–∫–ª—é—á–∞–π—Ç–µ –≤ –∫–∞–≤—ã—á–∫–∏.\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.",
            parse_mode='Markdown'
        )
        return GET_USERS_FILE

    @staticmethod
    @admin_only
    async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
        all_users = db.get_all_users()
        if not all_users:
            await update.message.reply_text("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        keyboard = [[InlineKeyboardButton(f"{user['full_name']} ({user['role']})", callback_data=f"user_details_{user['user_id']}")] for user in all_users]
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=InlineKeyboardMarkup(keyboard))

    @staticmethod
    @admin_only
    async def del_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            target_user_id = int(context.args[0])
            user_info = db.get_user(target_user_id)
            if not user_info:
                await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            text = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info['full_name']}? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."
            keyboard = [[InlineKeyboardButton("–î–ê, –£–î–ê–õ–ò–¢–¨", callback_data=f"confirm_delete_{target_user_id}"), InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]]
            await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        except (IndexError, ValueError):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /deluser <ID>")

    @staticmethod
    async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_info = db.get_user(update.effective_user.id)
        if not user_info: return
        session_state = db.get_session_state(update.effective_user.id)
        is_manager = user_info['role'] in ['manager', 'admin']
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:", reply_markup=MenuGenerator.get_report_period_menu(is_manager=is_manager, in_session=bool(session_state)))

    @staticmethod
    async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_info = db.get_user(user_id)
        help_text = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        if user_info and user_info['role'] == 'admin':
            help_text += ("**–í—ã ‚Äî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.**\n\n"
                          "`/adduser ID \"–ò–º—è –§–∞–º–∏–ª–∏—è\" [—Ä–æ–ª—å] [ID_—Ä—É–∫]` - –¥–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
                          "`/upload_users` - –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ CSV-—Ñ–∞–π–ª–∞.\n"
                          "`/users` - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
                          "`/deluser ID` - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID.\n"
                          "`/report` - –æ—Ç—á–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ.\n"
                          "`/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞.")
        elif user_info and user_info['role'] == 'manager':
            help_text += ("**–í—ã ‚Äî –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å.**\n\n"
                          "–ö–æ–º–∞–Ω–¥–∞ `/start` –≤—ã–∑–æ–≤–µ—Ç –≤–∞—à–µ –º–µ–Ω—é...\n"
                          "`/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞.")
        elif user_info and user_info['role'] == 'employee':
            help_text += ("**–í—ã ‚Äî –°–æ—Ç—Ä—É–¥–Ω–∏–∫.**\n\n"
                          "- –ù–∞—á–∏–Ω–∞–π—Ç–µ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–π—Ç–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –∫–Ω–æ–ø–∫–∞–º–∏.\n"
                          "`/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞.")
        else:
            help_text += "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        await context.bot.send_message(chat_id=user_id, text=help_text, parse_mode='Markdown')